name: Release Approval Check

on:
  pull_request:
    types: [opened, reopened, synchronize, edited]
  issue_comment:
    types: [created, edited, deleted]
  pull_request_review_comment:
    types: [created, edited, deleted]
  pull_request_review:
    types: [submitted, edited, dismissed]

jobs:
  release-approval-check:
    name: Release Approval Check
    runs-on: ubuntu-latest
    steps:
      - name: Determine Release Approval Status
        id: check_release_approval
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // add this script as a required status check in the master branch protection rules.
            // determine if we are merging into master, if so, then require release approval
            // pull_request_review and pull_request_review_comment have this value directly
            let pr = context.payload.pull_request;

            // For issue_comments, we need to make a rest call to get this data
            if (!pr && context.payload.issue?.pull_request) {
              const prNumber = context.payload.issue.number;
              const { data } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });
              pr = data;
            }

            if (!pr) {
              core.setFailed("PR object could not be retrieved.");
              core.info('PR object could not be retrieved.')
              return;
            }

            process.stderr.write(`Fetched PR base ref: ${pr.base.ref}\n`);

            if (pr.base.ref !== 'master') {
              const msg = `Skipping check: target branch is "${pr.base.ref}", not "master".`;
              core.notice(msg);
              console.log(msg);
              core.setOutput('status', 'pending');
              core.info(msg)
              return;
            }

            // branch is a release branch, so release approval is required.
            let action;
            if (context.payload.review) {
              action = context.payload.review.state;
              core.info('action from review state');
            } else {
              action = context.payload.action;
              core.info('action from action');
            }
            core.info(`action is ${action}`);

            const comment = context.payload.comment || context.payload.review;
            const changes = context.payload.changes;
            let commentBody = '';

            if (comment && comment.body) {
              commentBody = comment.body;
            }

            core.info(`comment body: ${commentBody}`);

            // We deleted a release approval
            if (action === 'deleted' && commentBody.includes('Release Approved')) {
              core.setOutput('status', 'failure');
              core.info(`comment deleted`);
              return;
            }

            // We created a new release approval
            if (['created', 'edited', 'commented', 'approved'].includes(action) && commentBody.includes('Release Approved')) {
              core.setOutput('status', 'success');
              core.info(`comment added/edited/etc`);
              return;
            }

            // We edited an existing release approval to not be a release approval
            if (action === 'edited' && changes && changes.body && changes.body.from && !commentBody.includes('Release Approved') && changes.body.from.includes('Release Approved')) {
              core.setOutput('status', 'failure');
              core.info(`comment edited in way that no longer approves`);
              return;
            }

            // Default to pending
            core.setOutput('status', 'pending');
            core.info(`everything else skipped, setting to pending`);

      - name: Update Commit Status
        if: steps.check_release_approval.outputs.status != 'pending'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const status = '${{ steps.check_release_approval.outputs.status }}';
            const prNumber = context.issue.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            const sha = pr.head.sha;
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: status,
              context: 'Release Approval Check',
              description: status === 'success' ? 'Release Manager has approved this PR!' : 'Release Manager approval has been revoked due to comment modification or deletion'
            });
